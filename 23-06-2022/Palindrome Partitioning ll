import java.util.*;
public class Solution {

	public static int palindromePartitioning(String str) {
	    int n = str.length();
        int[] dp = new int[n];
        Arrays.fill(dp, -1);
        return partition(str, 0, dp)-1;
	}
    
    static int partition(String s, int i, int[] dp){
        if(i >= s.length()){
            return 0;
        }
        
        if(dp[i] != -1){
            return dp[i];
        }
        
        int min = Integer.MAX_VALUE;
        for(int k = i; k < s.length(); k++){
            String cur = s.substring(i, k+1);
            int temp = Integer.MAX_VALUE;
            if(pal(cur)){
                temp = 1+partition(s, k+1, dp);
            }
            min = Math.min(temp, min);
        }
        
        return dp[i] = min;
    }
    
    static boolean pal(String cur){
        int i = 0;
        int j = cur.length()-1;
        while(i < j){
            if(cur.charAt(i) != cur.charAt(j)){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}


public class Solution {

	public static long countWaysToMakeChange(int coins[], int value){
        int n = coins.length; 
        long[][] dp = new long[n+1][value+1];
        for(int i =0; i <= n; i++){
            dp[i][0] = 1;
        }
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= value; j++){
                dp[i][j] = dp[i-1][j];
                if(coins[i-1] <= j){
                    dp[i][j] += dp[i][j-coins[i-1]];
                }
            }
        }
        return dp[n][value];
	}
    
//     static long change(int[] coins, int val, int i){
//         if(i < 0 || val < 0){
//             return 0;
//         }
        
//         if(val == 0){
//             return 1;
//         }
        
//         long notTake = change(coins, val, i-1); 
//         long take = change(coins, val-coins[i], i);
        
//         return take+notTake;
//     }
	
}

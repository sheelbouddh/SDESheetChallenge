import java.util.*;
public class Solution {


    public static List<List<Integer>> stronglyConnectedComponents(int n, int[][] edges) {
        List<List<Integer>> res = new ArrayList<>();
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        ArrayList<ArrayList<Integer>> transpose = new ArrayList<>();
        Stack<Integer> stack = new Stack<>();
        boolean[] visit = new boolean[n];
        
        for(int i = 0; i < n; i++){
            graph.add(new ArrayList<>());
        }
        
        for(int i = 0; i < edges.length; i++){
            int u = edges[i][0];
            int v = edges[i][1];
            
            graph.get(u).add(v);
        }
        
        for(int i = 0; i < n; i++){
            if(!visit[i]){
                dfs(i, stack, graph, visit);
            }
        }
        
       
        for(int i = 0; i < n; i++){
            transpose.add(new ArrayList<>());
        }
        
        for(int i = 0; i < n; i++){
            visit[i] = false;
            for(int u : graph.get(i)){
                transpose.get(u).add(i);
            }
        }
        
        while(!stack.isEmpty()){
            int node = stack.peek();
            stack.pop();
            if(!visit[node]){
                List<Integer> list = new ArrayList<>();
                dfsRev(node, list, transpose, visit);
                res.add(list);
            }
        }
        
        return res;
    }
    
    
    static void dfs(int node, Stack<Integer> stack, ArrayList<ArrayList<Integer>> graph, boolean[] visit){
        visit[node] = true;
        
        for(int nbr : graph.get(node)){
            if(!visit[nbr]){
                dfs(nbr, stack, graph, visit);
            }
        }
        
        stack.push(node);
    }
    
    static void dfsRev(int node, List<Integer> list, ArrayList<ArrayList<Integer>> graph, boolean[] visit){
        visit[node] = true;
        list.add(node);
        for(int nbr : graph.get(node)){
            if(!visit[nbr]){
                dfsRev(nbr, list, graph, visit);
            }
        }
    }
    
    
}

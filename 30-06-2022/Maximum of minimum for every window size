import java.util.*;
public class Solution {
    public static int[] maxMinWindow(int[] a, int n) {
        int[] ps = prev(a, n);
        int[] ns = next(a, n);
        
        int[] ans = new int[n];
        Arrays.fill(ans, Integer.MIN_VALUE);
        for(int i = 0; i < n; i++){
            int l = (ns[i]-ps[i]-1)-1;
            if(a[i] > ans[l]){
                ans[l] = a[i];
            }
        }
        
        for(int i = n-2; i>=0; i--){
            if(ans[i] < ans[i+1]){
                ans[i] = ans[i+1];
            }
        }
        
        return ans;
    }
    
    static int[] prev(int[] a, int n){
        int[] ans = new int[n];
        
        Stack<Integer> stack = new Stack<>();
        
        for(int i = 0; i < n; i++){
            while(!stack.isEmpty() && a[stack.peek()] >= a[i]){
                stack.pop();
            }
            
            if(stack.isEmpty()){
                ans[i] = -1;
            }else{
                ans[i] = stack.peek();
            }
            
            stack.push(i);
        }
        
        return ans;
    }
    
    static int[] next(int[] a, int n){
        int[] ans = new int[n];
        
        Stack<Integer> stack = new Stack<>();
        
        for(int i = n-1; i >= 0; i--){
            while(!stack.isEmpty() && a[stack.peek()] >= a[i]){
                stack.pop();
            }
            
            if(stack.isEmpty()){
                ans[i] = n;
            }else{
                ans[i] = stack.peek();
            }
            
            stack.push(i);
        }
        
        return ans;
    }
    
    
}


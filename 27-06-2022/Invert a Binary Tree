/************************************************************

    Following is the TreeNode class structure

    class TreeNode<T>
    {
       public:
        T data;
        TreeNode<T> left;
        TreeNode<T> right;

        TreeNode(T data)
        {
            this.data = data;
            left = null;
            right = null;
        }
    };

************************************************************/
import java.util.*;
public class Solution 
{
    static boolean helper(TreeNode<Integer> root, TreeNode<Integer> leaf, Stack<TreeNode<Integer>> stack){
        if(root == null) return false;
        
        stack.push(root);
        if(root.left == null && root.right == null){
            if(root.data.intValue() == leaf.data.intValue()){
                return true;
            }else{
                stack.pop();
                return false;
            }
        }
        
        if(helper(root.left, leaf, stack)){
            return true;
        }
        
        if(helper(root.right, leaf, stack)){
            return true;
        }
        
        stack.pop();
        return false;
    }
    
    public static TreeNode<Integer> invertBinaryTree(TreeNode<Integer> root, TreeNode<Integer> leaf) {
        if(root == null) return root;
        
        Stack<TreeNode<Integer>> stack = new Stack<>();
        helper(root, leaf, stack);
        TreeNode<Integer> newRoot = stack.peek();
        stack.pop();
        TreeNode<Integer> parent = newRoot;
        while(!stack.isEmpty()){
            TreeNode<Integer> cur = stack.peek();
            if(cur.left == parent){
                cur.left = null;
                parent.left = cur;
            }else{
                cur.right = cur.left;
                cur.left = null;
                parent.left = cur;
            }
            stack.pop();
            parent = cur;
        }
        
        return newRoot;
    }
}

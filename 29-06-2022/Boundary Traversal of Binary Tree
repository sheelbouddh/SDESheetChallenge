/************************************************************

    Following is the Binary Tree node structure:
    
   class TreeNode {
	    int data;
	    TreeNode left;
	    TreeNode right;

	    TreeNode(int data) {
		    this.data = data;
		    this.left = null;
		    this.right = null;
	    }

    }

************************************************************/

import java.util.*;

public class Solution {
	public static ArrayList<Integer> traverseBoundary(TreeNode root){
	    ArrayList<Integer> res = new ArrayList<>();
        if(root == null) return res;
        if(!isLeaf(root)) res.add(root.data);
        travelLeft(root, res);
        inorder(root, res);
        travelRight(root, res);
        return res;
	}
    
    public static boolean isLeaf(TreeNode node){
        return (node.left == null) && (node.right == null);
    }
    
    static void travelLeft(TreeNode root, ArrayList<Integer> res){
        TreeNode cur = root.left;
        while(cur != null){
            if(!isLeaf(cur)) res.add(cur.data);
            if(cur.left!= null) cur = cur.left;
            else cur = cur.right;
        }
    }
    
    static void travelRight(TreeNode root, ArrayList<Integer> res){
        TreeNode cur = root.right;
        Stack<TreeNode> st = new Stack<>(); 
        while(cur!= null){
            if(!isLeaf(cur)) st.push(cur);
            if(cur.right!= null) cur = cur.right;
            else cur = cur.left;
        }
        
        while(!st.isEmpty()){
            res.add(st.pop().data);
        }
    }
    
    static void inorder(TreeNode root, ArrayList<Integer> list){
        if(root == null) {
            return;
        }
        
        if(root.left == null && root.right == null){
            list.add(root.data);
        }
        
        inorder(root.left, list);
        inorder(root.right, list);
    }
    
    
}

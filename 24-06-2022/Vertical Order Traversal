/************************************************************

    Following is the TreeNode class structure

    class TreeNode<T> 
    {
       public:
        T data;
        TreeNode<T> left;
        TreeNode<T> right;

        TreeNode(T data) 
        {
            this.data = data;
            left = null;
            right = null;
        }
    };

************************************************************/

import java.util.*;

public class Solution 
{
    public static ArrayList<Integer> verticalOrderTraversal(TreeNode<Integer> root) 
    {
        HashMap<Integer, ArrayList<int[]>> map = new HashMap<>();
        view(root, 0, 0, map);
        ArrayList<Integer> list = new ArrayList<>();
        for(int i: map.keySet()){
            list.add(i);
        }
        
        Collections.sort(list);
        ArrayList<Integer> ans = new ArrayList<>();
        for(int i = 0; i < list.size(); i++){
            ArrayList<int[]> temp = map.get(list.get(i));
            for(int[] cur : temp){
                ans.add(cur[1]);
            }
        }
        return ans;
    }
    
    static void view(TreeNode<Integer> root, int hpos, int vpos, HashMap<Integer, ArrayList<int[]>> map){
        if(root == null) return;
        
        if(map.containsKey(hpos)){
            ArrayList<int[]> list = map.get(hpos);
            list.add(new int[]{vpos, root.data});
            Collections.sort(list, (a, b) -> a[0] - b[0]);
            map.put(hpos, list);
        }else{
            ArrayList<int[]> list = new ArrayList<>();
            list.add(new int[]{vpos, root.data});
            map.put(hpos, list);
        }
        
        
        view(root.left, hpos-1, vpos+1, map);
        view(root.right, hpos+1, vpos+1, map);
    }
}

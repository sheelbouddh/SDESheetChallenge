import java.util.*;
public class Solution {
	public static ArrayList<Integer> BFS(int v, int edges[][]){
		ArrayList<TreeSet<Integer>> graph = new ArrayList<>();
        for(int i = 0; i <= v; i++){
            graph.add(new TreeSet<>());
        }
        
        for(int i =0 ; i < edges[0].length; i++){
            int u = edges[0][i];
            int x = edges[1][i];
            graph.get(u).add(x);
            graph.get(x).add(u);
        }
        boolean[] visit = new boolean[v];
        ArrayList<Integer> list = new ArrayList<>();
        for(int i = 0; i < v; i++)
        {
            if(!visit[i]){
                Queue<Integer> queue = new LinkedList<>();
                queue.offer(i);
                visit[i] = true;
                while(!queue.isEmpty()){
                    int node = queue.poll();
                    list.add(node);
                    for(int nbr : graph.get(node)){
                        if(!visit[nbr]){
                            visit[nbr] = true;
                            queue.offer(nbr);
                        }
                    }
                }
            }
        }
        
        return list;
	}
}


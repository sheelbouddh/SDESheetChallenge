import java.util.*;
public class Solution {
	
	public static ArrayList < Integer > dijkstra(ArrayList< ArrayList < Integer > > vec, int vertices, int edges, int source){
		ArrayList<ArrayList<int[]>> graph = new ArrayList<>();
        for(int i = 0; i < vertices; i++){
            graph.add(new ArrayList<>());
        }
        
        for(int i = 0; i < edges; i++){
            int u = vec.get(i).get(0);
            int v = vec.get(i).get(1);
            int w = vec.get(i).get(2);
            
            graph.get(u).add(new int[]{w, v});
            graph.get(v).add(new int[]{w, u});
        }
        
        int[] dist = new int[vertices];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;
        
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        pq.offer(new int[]{0, source});
        
        while(!pq.isEmpty()){
            int[] cur = pq.poll();
            int w = cur[0];
            int u = cur[1];
            for(int i = 0; i < graph.get(u).size(); i++){
                int[] nbr = graph.get(u).get(i);
                if(w + nbr[0] < dist[nbr[1]]){
                    dist[nbr[1]] = w+nbr[0];
                    pq.offer(new int[]{dist[nbr[1]], nbr[1]});
                }
            }
        }
        
        ArrayList<Integer> list = new ArrayList<>();
        for(int i : dist){
            list.add(i);
        }
        
        return list;
	}
}

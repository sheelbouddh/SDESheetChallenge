import java.util.*;
public class Solution {
	public static int heightOfTheTree(int[] inorder, int[] levelOrder, int N){
        return height(inorder, levelOrder, 0, N-1, N);
    }
    
    static int height(int[] in, int[] lvl, int start, int end, int n){
        if(start > end) return 0;
        
        int ind = search(in, start, end, lvl[0]);
        if(ind == -1){
            return 0;
        }
        
        int lc = ind - start;
        int rc = end - ind;
        
        int[] right = new int[rc];
        int[] left = new int[lc];
        int lh = 0, rh = 0, k = 0;
        
         for (int i = 0; i < n; i++)
    {
        for (int j = start; j < ind; j++)
        {
            if (lvl[i] == in[j])
            {
                left[k] = lvl[i];
                k++;
                break;
            }
        }
    }
 
    k = 0;
       for (int i = 0; i < n; i++)
        {
            for (int j = ind + 1; j <= end; j++)
            {
                if (lvl[i] == in[j])
                {
                    right[k] = lvl[i];
                    k++;
                    break;
                }
            }
        }
        int heightl = 0, heightr = 0;
        if(lc > 0){
            heightl = height(in, left, start, ind-1, lc);
        }
        
        if(rc > 0){
            heightr = height(in, right, ind+1, end, rc);
        }
        
        return Math.max(heightr, heightl) +1;
    }
    
    static int search(int[] in, int start, int end, int val){
        
        for(int i = start; i <= end; i++){
            if(in[i] == val){
                return i;
            }
        }
        
        return -1;
    }
}

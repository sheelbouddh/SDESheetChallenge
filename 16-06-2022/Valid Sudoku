class Solution {
    public boolean isValidSudoku(char[][] board) {
        return solve(board);
    }
    boolean solve(char[][] board){
        boolean safe = true;
        for(int i=0 ; i<9; i++){
            for (int j = 0; j<9; j++){
                if(board[i][j] != '.'){
                    char temp = board[i][j];
                    board[i][j] = 0;
                    safe = isSafe(board, i, j, temp);
                    if(!safe){
                        return false;
                    }
                    board[i][j] = temp;
                }
            }
        }
        
        return safe;
        
    }

    boolean isSafe(char[][] board, int row, int col, char num){
        //for rows
        for(int i = 0; i<board.length; i++){
            if(board[row][i] == num){
                return false;
            }
        }

        //for columns
        for(char[] r: board){
            if(r[col] == num){
                return false;
            }
        }

        // for square
        int sqrt = (int)(Math.sqrt(board.length));
        int rowStart = row - row % sqrt;
        int colStart = col - col % sqrt;

        for(int i = rowStart; i< rowStart+sqrt; i++){
            for (int j = colStart; j< colStart+sqrt; j++){
                if(board[i][j] == num){
                    return false;
                }
            }
        }

        return true;
    }
}

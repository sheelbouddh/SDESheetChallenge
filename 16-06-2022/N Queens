import java.util.*;
public class Solution {
    public static ArrayList<ArrayList<Integer>> solveNQueens(int n) {
        return queen(0, new int[n][n], n);
    }
    
    static ArrayList<ArrayList<Integer>> queen(int row, int[][] board, int q){
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        if(q == 0){
            add(list, board);
            return list;
        }
        
        for(int i = 0; i < board.length; i++){
            if(isSafe(board, row, i)){
                board[row][i] = 1;
                list.addAll(queen(row+1, board, q-1));
                board[row][i] = 0;
            }
        }
        
        return list;
    }
    
    static boolean isSafe(int[][] board, int row, int col){
        for(int i = 0; i < row; i++){
            if(board[i][col] == 1){
                return false;
            }
        }
        
        for(int i =1; i <= Math.min(row, col); i++){
            if(board[row-i][col-i] == 1){
                return false;
            }
        }
        
        for(int i = 1; i <= Math.min(row, board.length-1-col); i++){
            if(board[row-i][col+i] == 1){
                return false;
            }
        }
        
        return true;
    }
    
    static void add(ArrayList<ArrayList<Integer>> list, int[][] board){
        ArrayList<Integer> cur = new ArrayList<>();
        for(int[] i: board){
            for(int j : i){
                cur.add(j);
            }
        }
        list.add(cur);
    }
}

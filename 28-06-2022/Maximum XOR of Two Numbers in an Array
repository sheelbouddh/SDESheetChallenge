class Node{
    Node[] child;
    Node(){
        child = new Node[2];
    }
    
    boolean containsKey(int bit){
        return child[bit] != null;
    }
    Node get(int bit){
        return child[bit];
    }
    
    void put(int bit, Node node){
        child[bit] = node;
    }
}

class Trie{
    private Node root;
    Trie(){
        root = new Node();
    }
    
    void insert(int num){
        Node cur = root;
        for(int i = 31; i>= 0; i--){
            int bit = (num >> i) & 1;
            if(!cur.containsKey(bit)){
                cur.put(bit, new Node());
            }
            
            cur = cur.get(bit);
        }
    }
    
    int getMaxXor(int num){
        Node cur = root;
        int max = 0;
        for(int i = 31; i >= 0; i--){
            int bit = (num >> i) & 1;
            if(cur.containsKey(1-bit)){
                max = max | (1<<i);
                cur = cur.get(1-bit);
            }else{
                cur = cur.get(bit);
            }
        }
        
        return max;
    }
}
public class Solution {

    public static int maximumXor(int[] A) {
        Trie trie = new Trie();
        
        for(int i : A){
            trie.insert(i);
        }
        
        int max = 0;
        for(int i : A){
            max = Math.max(max, trie.getMaxXor(i));
        }
        
        return max;
    }
}

import java.util.*;
public class Solution {

	public static int minTimeToRot(int[][] grid, int n, int m) {
		Queue<int[]> queue = new LinkedList<>();
        int fresh = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(grid[i][j] == 2){
                    queue.offer(new int[]{i, j});
                }else if(grid[i][j] == 1){
                    fresh++;
                }
            }
        }
        
        if(fresh == 0) return 0;
        int[][] dir = {
            {1,0},{-1,0},{0,1},{0,-1}
        };
        int level = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            level++;
            while(size-- > 0){
                int[] cur = queue.poll();
                for(int[] d : dir){
                    int r = cur[0] + d[0];
                    int c = cur[1] + d[1];
                    
                    if(r < 0 || c < 0 || r >= n || c>= m || grid[r][c] == 0 || grid[r][c] == 2){
                        continue;
                    }
                    
                    grid[r][c] = 2;
                    queue.offer(new int[]{r,c});
                    fresh--;
                }
            }
            
        }
        
        return fresh == 0 ? level-1 : -1;
	}
    
    

}

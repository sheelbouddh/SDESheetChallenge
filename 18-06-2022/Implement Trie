class TrieNode{
    TrieNode[] child;
    boolean isEnd;
    TrieNode(){
        child = new TrieNode[26];
        isEnd = false;
    }
}
public class Trie {

    private static TrieNode root;
    //Initialize your data structure here

    Trie() {
        root = new TrieNode();
    }


    //Inserts a word into the trie

    public static void insert(String word) {
        char[] arr = word.toCharArray();
        TrieNode cur = root;
        
        for(int i = 0; i < arr.length; i++){
            int index = arr[i] - 'a';
            if(cur.child[index] == null){
                cur.child[index] = new TrieNode();
            }
            
            cur = cur.child[index];
            if(i == arr.length-1){
                cur.isEnd = true;
            }
        }
        
    }


    //Returns if the word is in the trie

    public static boolean search(String word) {
        char[] arr = word.toCharArray();
        TrieNode cur = root;
        
        for(int i = 0; i < arr.length; i++){
            int index = arr[i] - 'a';
            if(cur.child[index] == null){
                return false;
            }
            
            cur = cur.child[index];
        }
        
        return cur.isEnd;
    }

    
    //Returns if there is any word in the trie that starts with the given prefix

    public static boolean startsWith(String prefix) {
        char[] arr = prefix.toCharArray();
        TrieNode cur = root;
        
        for(int i = 0; i < arr.length; i++){
            int index = arr[i] - 'a';
            if(cur.child[index] == null){
                return false;
            }
            
            cur = cur.child[index];
        }
        
        return true;
    }
}

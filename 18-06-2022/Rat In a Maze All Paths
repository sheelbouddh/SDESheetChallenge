import java.util.*;
public class Solution {
    public static ArrayList<ArrayList<Integer>> ratInAMaze(int[][] maze, int n) {
        if(maze[0][0] == 0 || maze[n-1][n-1] == 0){
            return new ArrayList<>();
        }
        
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        dfs(maze, n, 0, 0, ans);
        return ans;
    }
    
    static int[][] dir = {{1, 0}, {-1, 0}, {0, -1}, {0, 1}};
    static void dfs(int[][] maze, int n, int r, int c, ArrayList<ArrayList<Integer>> ans){
        if(r == n-1 && c == n-1){
            maze[r][c] = -1;
            ArrayList<Integer> temp = new ArrayList<>();
            for(int i = 0; i < n; i++){
                for(int j = 0; j < n; j++){
                    if(maze[i][j] == -1){
                        temp.add(1);
                    }else{
                        temp.add(0);
                    }
                }
            }
            ans.add(temp);
            return;
        }
        if(r < 0 || r >= n || c < 0 || c >= n || maze[r][c] == 0 || maze[r][c] == -1){
            return;
        }
        
        maze[r][c] = -1;
        for(int[] d: dir){
            dfs(maze, n, r+d[0], c+d[1], ans);
        }
        maze[r][c] = 1;
    }
}

/*
	Following is the class used to represent the object/node of the Binary Tree

	class BinaryTreeNode<T> {
	    T data;
	    BinaryTreeNode<T> left;
	    BinaryTreeNode<T> right;

	    public BinaryTreeNode(T data) {
	        this.data = data;
	    }
	}
*/
import java.util.*;
public class Solution {
	public static List<Integer> zigZagTraversal(BinaryTreeNode<Integer> root) {
		List<Integer> list = new ArrayList<>();
        if(root == null) return list;
        Queue<BinaryTreeNode<Integer>> queue = new LinkedList<>();
        queue.offer(root);
        boolean reverse = false;
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> temp = new ArrayList<>();
            for(int i = 0 ; i < size; i++){
                BinaryTreeNode<Integer> cur = queue.poll();
                temp.add(cur.data);
                if(cur.left != null){
                    queue.offer(cur.left);
                }
                
                if(cur.right != null){
                    queue.offer(cur.right);
                }
                
            }
            if(reverse){
                Collections.reverse(temp);
            }
            reverse = !reverse;
            list.addAll(temp);
        }
        
        return list;
	}
}

/*

	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T val;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T val) {
			this.val = val;
			this.left = null;
			this.right = null;
		}
	}

*/

import java.util.ArrayList;
import java.util.*;

public class Solution {

  public static ArrayList<Integer> getLevelOrder(BinaryTreeNode root) {
       Queue<BinaryTreeNode> queue  = new LinkedList<>();
       ArrayList<Integer> list = new ArrayList<>();
      if(root == null){
          return list;
      }
      queue.offer(root);
      while(!queue.isEmpty()){
          int size = queue.size();
          while(size-- > 0){
              BinaryTreeNode cur = queue.poll();
              list.add(cur.val);
              if(cur.left != null){
                  queue.offer(cur.left);
              }
              
              if(cur.right != null){
                  queue.offer(cur.right);
              }
          }
      }
      
      return list;
  }

}
